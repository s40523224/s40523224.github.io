<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>2016Fall CPA 課程網誌 (虎尾科大MDE) - Misc</title><link href="./" rel="alternate"></link><link href="./feeds/misc.atom.xml" rel="self"></link><id>./</id><updated>2018-05-30T12:03:00+08:00</updated><entry><title>2018cp漸開線正齒輪輪廓嘗試轉為動態繪圖</title><link href="./2018cpjian-kai-xian-zheng-chi-lun-lun-kuo-chang-shi-zhuan-wei-dong-tai-hui-tu.html" rel="alternate"></link><published>2018-05-30T12:03:00+08:00</published><updated>2018-05-30T12:03:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2018-05-30:./2018cpjian-kai-xian-zheng-chi-lun-lun-kuo-chang-shi-zhuan-wei-dong-tai-hui-tu.html</id><summary type="html">&lt;p&gt;完成兩齒嚙合靜態繪圖後, 請嘗試轉為動態繪圖.&lt;/p&gt;
&lt;p&gt;設定尺數=48,24&lt;/p&gt;
</summary><content type="html">&lt;p&gt;完成兩齒嚙合靜態繪圖後, 請嘗試轉為動態繪圖.&lt;/p&gt;
&lt;p&gt;設定尺數=48,24&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/Cango-9v05-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAxes-2v09.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/CangoAnimation-5v00.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='1200' height='800'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
#cobj = window.Cobj.new
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new

tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 20
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = shape(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)

    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True

    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr))
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path

    # setup the animation
    # backlash (mm)
    bklsh = 0.04*m
    # centre shift to make backlash
    dC = bklsh/(2*math.tan(math.pi*pa/180))
    # np 為小齒輪齒數
    np = 20
    # gear ratio
    gr = n/np              
    gearConfig = {'cx':-pr, 'cy':0, 'degs':[0, 360]}
    # gr*0.666 rpm
    #pinionConfig = {'cx':pr+dC, 'cy':0, 'degs':[0, -gr*360]}
    # 0.666 rpm
    # 目前並非以 tweener 執行動畫
    #twnr = tweener(0, 90000, "loop")
    return gear

# 設定兩齒齒數
n = 48
n2 = 24
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.5*canvas.width/((n+n2)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr = n*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
# 建立 gear
gear = cangoGear(n, m, pa)
cx = canvas.width/2
cy = canvas.height/2
#gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
#cgo.render(gear)
# 利用 gear 資料複製一份, 命名為 gear1
#gear1 = gear.dup()
# 建立 gear1
gear1 = cangoGear(n2, m, pa)


from time import time
from browser.timer import request_animation_frame as raf
from browser.timer import set_interval

deg = math.pi/180

def draw():
    cgo.clearCanvas()
    gear.rotate(2*deg)
    # 在特定位置, 以特定 scale, 特定 degs 執行 render
    # 設定囓合點在畫布正中央
    # 囓合點往左偏 pr/2 即為 n 齒輪的圓心 x 座標
    #cgo.render(gear, {'x':cx-pr*reduced_ratio, 'y':cy, 'scl':reduced_ratio, 'degs':0})
    cgo.render(gear, {'x':cx-(pr+pr2)*reduced_ratio, 'y':cy, 'scl':0.5, 'degs':0})
    # 根據兩齒輪齒數比決定 n2 齒輪轉速
    gear1.rotate(-2*deg*n/n2)
    # 囓合點往右偏 pr2/2 即為 n2 齒輪的圓心 x 座標, 且 n2 齒轉 180 加一齒角度後囓合
    cgo.render(gear1, {'x':cx, 'y':cy, 'scl':reduced_ratio, 'degs':180+(360/n2/2)})

set_interval(draw, 2)
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2018cp一組 50t 與 25t 的齒輪嚙合靜態輪廓圖</title><link href="./2018cpyi-zu-50t-yu-25t-de-chi-lun-nie-he-jing-tai-lun-kuo-tu.html" rel="alternate"></link><published>2018-05-30T12:02:00+08:00</published><updated>2018-05-30T12:02:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2018-05-30:./2018cpyi-zu-50t-yu-25t-de-chi-lun-nie-he-jing-tai-lun-kuo-tu.html</id><summary type="html">&lt;p&gt;48齒 與 24齒 的齒輪嚙合靜態圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;48齒 與 24齒 的齒輪嚙合靜態圖&lt;/p&gt;


&lt;script type="text/javascript" src="https://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;canvas id='gear1' width='800' height='700'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math

# 主要用來取得畫布大小
canvas = doc["gear1"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)

# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("gear1")

######################################
# 畫正齒輪輪廓
#####################################
def spur(cx, cy, m, n, pa, theta):
    # n 為齒數
    #n = 50
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)

    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree
    # theta 為角度
    gearTooth.rotate(theta) 
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)

    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True

    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    # 接著繪製齒輪的基準線
    deg = math.pi/180
    Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], "PATH", {
          'strokeColor':'blue', 'lineWidth': 1})
    cgo.render(Line)

# 2個齒輪的齒數
n1 = 50
n2 = 25


# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
# 利用 80% 的畫布寬度進行繪圖
# 計算模數的對應尺寸
m = canvas.width*0.8/(n1+n2)

# 根據齒數與模組計算各齒輪的節圓半徑
pr1 = n1*m/2
pr2 = n2*m/2


# 畫布左右兩側都保留畫布寬度的 10%
# 依此計算對應的最左邊齒輪的軸心座標
cx = canvas.width*0.1+pr1
cy = canvas.height/2

# pa 為壓力角
pa = 25

# 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy)
spur(cx, cy, m, n1, pa, 0)
# 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊
# 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合
# 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n
spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2)
# 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置
# 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合
# 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度
# 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2018cp漸開線正齒輪輪廓外型</title><link href="./2018cpjian-kai-xian-zheng-chi-lun-lun-kuo-wai-xing.html" rel="alternate"></link><published>2018-05-30T12:00:00+08:00</published><updated>2018-05-30T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2018-05-30:./2018cpjian-kai-xian-zheng-chi-lun-lun-kuo-wai-xing.html</id><summary type="html">&lt;p&gt;請各組員在各自的 Github Pages 中繪製一個自選齒數的漸開線正齒輪輪廓外型.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;請各組員在各自的 Github Pages 中繪製一個自選齒數的漸開線正齒輪輪廓外型.&lt;/p&gt;


&lt;script type="text/javascript" src="https://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script src="../data/Brython-3.3.1/brython.js"&gt;&lt;/script&gt;

&lt;script src="../data/Brython-3.3.1/brython_stdlib.js"&gt;&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
// 設定 data/py 為共用程式路徑
brython({debug:1, pythonpath:['./../data/py']});
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 繪圖--&gt;

&lt;canvas id="onegear" width="400" height="300"&gt;&lt;/canvas&gt;

&lt;div id="onegear_div" width="400" height="10"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# deg 為角度轉為徑度的轉換因子
deg = math.pi/180.
# 定義 Spur 類別
class Spur(object):
    def __init__(self, ctx):
        self.ctx = ctx

    def create_line(self, x1, y1, x2, y2, width=3, fill="red"):
        self.ctx.beginPath()
        self.ctx.lineWidth = width
        self.ctx.moveTo(x1, y1)
        self.ctx.lineTo(x2, y2)
        self.ctx.strokeStyle = fill
        self.ctx.stroke()
    #
    # 定義一個繪正齒輪的繪圖函式
    # midx 為齒輪圓心 x 座標
    # midy 為齒輪圓心 y 座標
    # rp 為節圓半徑, n 為齒數
    # pa 為壓力角 (deg)
    # rot 為旋轉角 (deg)
    # 已經針對 n 大於等於 52 齒時的繪圖錯誤修正, 因為 base circle 與齒根圓大小必須進行判斷
    def Gear(self, midx, midy, rp, n=20, pa=20, color="black"):
        # 齒輪漸開線分成 15 線段繪製
        imax = 15
        # 在輸入的畫布上繪製直線, 由圓心到節圓 y 軸頂點畫一直線
        self.create_line(midx, midy, midx, midy-rp)
        # 畫出 rp 圓, 畫圓函式尚未定義
        #create_oval(midx-rp, midy-rp, midx+rp, midy+rp, width=2)
        # a 為模數 (代表公制中齒的大小), 模數為節圓直徑(稱為節徑)除以齒數
        # 模數也就是齒冠大小
        a=2*rp/n
        # d 為齒根大小, 為模數的 1.157 或 1.25倍, 這裡採 1.25 倍
        d=2.5*rp/n
        # ra 為齒輪的外圍半徑
        ra=rp+a
        # 畫出 ra 圓, 畫圓函式尚未定義
        #create_oval(midx-ra, midy-ra, midx+ra, midy+ra, width=1)
        # rb 則為齒輪的基圓半徑
        # 基圓為漸開線長齒之基準圓
        rb=rp*math.cos(pa*deg)
        # 畫出 rb 圓 (基圓), 畫圓函式尚未定義
        #create_oval(midx-rb, midy-rb, midx+rb, midy+rb, width=1)
        # rd 為齒根圓半徑
        rd=rp-d
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        # 畫出 rd 圓 (齒根圓), 畫圓函式尚未定義
        #create_oval(midx-rd, midy-rd, midx+rd, midy+rd, width=1)
        # dr 則為基圓到齒頂圓半徑分成 imax 段後的每段半徑增量大小
        # 將圓弧分成 imax 段來繪製漸開線
        # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
        if rd&gt;rb:
            dr = (ra-rd)/imax
        else:
            dr=(ra-rb)/imax
        # tan(pa*deg)-pa*deg 為漸開線函數
        sigma=math.pi/(2*n)+math.tan(pa*deg)-pa*deg
        for j in range(n):
            ang=-2.*j*math.pi/n+sigma
            ang2=2.*j*math.pi/n+sigma
            lxd=midx+rd*math.sin(ang2-2.*math.pi/n)
            lyd=midy-rd*math.cos(ang2-2.*math.pi/n)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(alpha-ang)
                ypt=r*math.cos(alpha-ang)
                xd=rd*math.sin(-ang)
                yd=rd*math.cos(-ang)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由左側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    lfx=midx+xpt
                    lfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # the line from last end of dedendum point to the recent
            # end of dedendum point
            # lxd 為齒根圓上的左側 x 座標, lyd 則為 y 座標
            # 下列為齒根圓上用來近似圓弧的直線
            self.create_line((lxd),(lyd),(midx+xd),(midy-yd),fill=color)
            for i in range(imax+1):
                # 當 rd 大於 rb 時, 漸開線並非畫至 rb, 而是 rd
                if rd&gt;rb:
                    r=rd+i*dr
                else:
                    r=rb+i*dr
                theta=math.sqrt((r*r)/(rb*rb)-1.)
                alpha=theta-math.atan(theta)
                xpt=r*math.sin(ang2-alpha)
                ypt=r*math.cos(ang2-alpha)
                xd=rd*math.sin(ang2)
                yd=rd*math.cos(ang2)
                # i=0 時, 繪線起點由齒根圓上的點, 作為起點
                if(i==0):
                    last_x = midx+xd
                    last_y = midy-yd
                # 由右側齒根圓作為起點, 除第一點 (xd,yd) 齒根圓上的起點外, 其餘的 (xpt,ypt)則為漸開線上的分段點
                self.create_line((midx+xpt),(midy-ypt),(last_x),(last_y),fill=color)
                # 最後一點, 則為齒頂圓
                if(i==imax):
                    rfx=midx+xpt
                    rfy=midy-ypt
                last_x = midx+xpt
                last_y = midy-ypt
            # lfx 為齒頂圓上的左側 x 座標, lfy 則為 y 座標
            # 下列為齒頂圓上用來近似圓弧的直線
            self.create_line(lfx,lfy,rfx,rfy,fill=color)
canvas = doc['onegear']
ctx = canvas.getContext("2d")
x = (canvas.width)/2
y = (canvas.height)/2
r = 0.8*(canvas.height/2)
# 齒數
n = 24
# 壓力角
pa = 20
Spur(ctx).Gear(x, y, r, n, pa, "blue")
&lt;/script&gt;

&lt;!-- 以下處理 Cango Spur Gear --&gt;

&lt;!-- Cango 程式庫 --&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango-8v03.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/Cango2D-7v01-min.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAxes-1v33.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/CangoAnimation-4v01.js"&gt;&lt;/script&gt;

&lt;script type="text/javascript" src="./../data/w11/cango
_old/gearUtils-05.js"&gt;&lt;/script&gt;

&lt;canvas id='cango_gear' width='400' height='375'&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
import math

# 主要用來取得畫布大小
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = window.Cobj.new
creategeartooth = window.createGearTooth.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")

######################################
# 畫正齒輪輪廓
#####################################
# n 為齒數
n = 24
# pa 為壓力角
pa = 25
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
m = 0.8*canvas.width/n
# pr 為節圓半徑
pr = n*m/2 # gear Pitch radius
# generate gear
data = creategeartooth(m, n, pa)
# Brython 程式中的 print 會將資料印在 Browser 的 console 區
#print(data)
gearTooth = cobj(data, "SHAPE", {
        "fillColor":"#ddd0dd",
        "border": True,
        "strokeColor": "#606060" })
gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
# 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
gear = gearTooth.dup()
# gear 為單一齒的輪廓資料
#cgo.render(gearTooth)

# 利用單齒輪廓旋轉, 產生整個正齒輪外形
for i in range(1, n):
    # 將 gearTooth 中的資料複製到 newTooth
    newTooth = gearTooth.dup()
    # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
    newTooth.rotate(360*i/n)
    # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
    gear.appendPath(newTooth, True) # trim move command = True

# 建立軸孔
# add axle hole, hr 為 hole radius
hr = 0.6*pr # diameter of gear shaft
shaft = cobj(shapedefs.circle(hr), "PATH")
shaft.revWinding()
gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
cx = canvas.width/2
cy = canvas.height/2
gear.translate(cx, cy)
# render 繪出靜態正齒輪輪廓
cgo.render(gear)

# 以 button 驅動的事件函式
def setgearnumber(e):
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    x = (canvas.width)/2
    y = (canvas.height)/2
    if doc["n"].value.isdigit():
        n1 = int(doc["n"].value)
    else:
        n1= 22
    # 設定齒輪參數
    x = (canvas.width)/2
    y = (canvas.height)/2
    r = 0.6*(canvas.height/2)
    pa = 20
    # 繪出齒輪
    Spur(ctx).Gear(x, y, r, n1, pa, "blue")
#判定 button
setgearnumber(True)
doc['button'].bind('click',setgearnumber)
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2016fallcp期末考週</title><link href="./2016fallcpqi-mo-kao-zhou.html" rel="alternate"></link><published>2017-01-09T12:00:00+08:00</published><updated>2017-01-09T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2017-01-09:./2016fallcpqi-mo-kao-zhou.html</id><summary type="html">&lt;p&gt;期末考週&lt;/p&gt;
</summary><content type="html">&lt;p&gt;期末考週&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;p&gt;W17週心得與程式範例:&lt;/p&gt;
&lt;p&gt;W16週心得與程式範例:&lt;/p&gt;
&lt;p&gt;猜電腦所選定的某一範圍中的整數&lt;/p&gt;
&lt;p&gt;步驟一: 電腦以亂數選定一個整數, 並且存檔&lt;/p&gt;
&lt;p&gt;步驟二: 程式接受使用者所猜的整數&lt;/p&gt;
&lt;p&gt;步驟三: 使用者輸入後有三種可能情況, 輸入的整數與電腦所選的整數相同, 或者不相同, 或者並未輸入整數&lt;/p&gt;
&lt;p&gt;步驟四: 假如利用 try： except: 就可以處理使用者輸入是否整數的程式分流, 若輸入整數, 則利用 while 迴圈處理沒有猜對的輸入, 可以要求再輸入至一定次數後跳出 while 迴圈&lt;/p&gt;
&lt;p&gt;步驟五: 使用者輸入整數時, 若沒有猜對則印出比正確數字大或小的提示, 直到使用者猜對或因累計至預設猜謎次數後跳出迴圈.&lt;/p&gt;
&lt;p&gt;學習要點: 如何利用 random 模組產生特定範圍內的整數&lt;/p&gt;
&lt;p&gt;try: except： 如何使用?&lt;/p&gt;
&lt;p&gt;while 迴圈如何使用？&lt;/p&gt;
&lt;p&gt;如何進行兩個整數變數比較?&lt;/p&gt;
&lt;p&gt;如何列印提示或者設計較為體貼的程式流程?&lt;/p&gt;
&lt;p&gt;有沒有可能讓電腦自行"玩"猜數字遊戲? http://wordpress-2015course.rhcloud.com/?p=4319&lt;/p&gt;
&lt;div id="con"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import alert
from browser import document
from browser import html
import random



def b2(e):
    alert("按確定")  
    標準答案 = random.randint(1, 100)
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1

    while 標準答案 != 你猜的數字:
        if 標準答案 &lt; 你猜的數字:   
            print(你猜的數字,"太大了，再猜一次 :)加油")
            con1&lt;=str(你猜的數字)
        else:
            print(你猜的數字,"太小了，再猜一次 :)加油")
        你猜的數字 = int(input("請輸入您所猜的整數:"))
        猜測次數 += 1       
    print("猜對了！總共猜了", 猜測次數, "次")
document["b2"].bind("click",b2)

&lt;/script&gt;

&lt;p&gt;&lt;button id="b2"&gt;猜數字&lt;/button&gt;&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
&lt;div id="con"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import alert
from browser import document
from browser import html
import random



def b2(e):
    alert("按確定")  
    標準答案 = random.randint(1, 100)
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1

    while 標準答案 != 你猜的數字:
        if 標準答案 &lt; 你猜的數字:   
            print(你猜的數字,"太大了，再猜一次 :)加油")
            con1&lt;=str(你猜的數字)
        else:
            print(你猜的數字,"太小了，再猜一次 :)加油")
        你猜的數字 = int(input("請輸入您所猜的整數:"))
        猜測次數 += 1       
    print("猜對了！總共猜了", 猜測次數, "次")
document["b2"].bind("click",b2)

&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;W15週心得與程式範例:&lt;/p&gt;
&lt;p&gt;Leo Editor 的節點 @edit @path @button 的用法到 pelican 轉 .md 檔案成為 blog 網誌, 並加入 Brython 程式導入與執行的方法&lt;/p&gt;
&lt;p&gt;@settings-&amp;gt;設定節點
@edit-&amp;gt;增新節點
@button-&amp;gt;按鈕&lt;/p&gt;
&lt;p&gt;移動節點
ctrl+u 向上移動
ctrl+d 向下移動
ctrl+r 向右移動
ctrl+l 向左移動
ctrl+i 新增內容
ctrl+b 執行內容&lt;/p&gt;
&lt;div id="con"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as do
from browser import html
c = do["con"]
def compa(e):
    your_input = input("請輸入一個整數!")
    # 如何判斷所輸入的整數比 10 大
    try:
        if int(your_input) &gt; 10:
            c &lt;= "所輸入的整數:" + your_input + "比 10 大" + html.BR()
        else:
            c &lt;= "所輸入的整數:" + your_input + "比 10 小" + html.BR()
    except:
        c &lt;= "請輸入整數!!" + html.BR()

#print("test")
'''
for i in range(5):
    c &lt;= "test" + html.BR()
'''
do["b1"].bind("click", compa)
&lt;/script&gt;

&lt;p&gt;&lt;button id="b1"&gt;compa&lt;/button&gt;&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;
&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;
&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
&lt;div id="con"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import document as do
from browser import html
c = do["con"]
def compa(e):
    your_input = input("請輸入一個整數!")
    # 如何判斷所輸入的整數比 10 大
    try:
        if int(your_input) &gt; 10:
            c &lt;= "所輸入的整數:" + your_input + "比 10 大" + html.BR()
        else:
            c &lt;= "所輸入的整數:" + your_input + "比 10 小" + html.BR()
    except:
        c &lt;= "請輸入整數!!" + html.BR()

#print("test")
'''
for i in range(5):
    c &lt;= "test" + html.BR()
'''
do["b1"].bind("click", compa)
&lt;/script&gt;
&lt;/pre&gt;</content><category term="使用導引"></category></entry><entry><title>計算機程式 W16 範例整理</title><link href="./ji-suan-ji-cheng-shi-w16-fan-li-zheng-li.html" rel="alternate"></link><published>2016-12-26T12:00:00+08:00</published><updated>2016-12-26T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-12-26:./ji-suan-ji-cheng-shi-w16-fan-li-zheng-li.html</id><summary type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;div id="con"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import alert
from browser import document
from browser import html
import random

#print("test")
#alert("test")
con1=document["con"]
標準答案=random.randint(1,100)
con1&lt;=str(標準答案)

def b1(e):
    alert("按確定")  
    標準答案 = random.randint(1, 100)
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1

    while 標準答案 != 你猜的數字:
        if 標準答案 &lt; 你猜的數字:   
            print(你猜的數字,"太大了，再猜一次 :)加油")
            con1&lt;=str(你猜的數字)
        else:
            print(你猜的數字,"太小了，再猜一次 :)加油")
        你猜的數字 = int(input("請輸入您所猜的整數:"))
        猜測次數 += 1       
    print("猜對了！總共猜了", 猜測次數, "次")
document["b1"].bind("click",b1)


&lt;/script&gt;

&lt;p&gt;&lt;button id="b1"&gt;猜數字&lt;/button&gt;&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&lt;div id="con"&gt;&lt;/div&gt;
&lt;script type="text/python3"&gt;
from browser import alert
from browser import document
from browser import html
import random

#print("test")
#alert("test")
con1=document["con"]
con1&lt;=str(標準答案)

try:
 for i in range(1):
        yourInput=int(input("輸入一個整數!"))
        #con1 &lt;= "test" + html.BR()
        output=yourInput+1
        con1&lt;="+1之後輸入的是"+str(output)
except:
    con1&lt;="輸入數字"

def b1(e):
    alert("click")  
    標準答案 = random.randint(1, 100)
    你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    你猜的數字=x
    while 標準答案 != 你猜的數字:
        if 標準答案 &lt; 你猜的數字:
            print("太大了，再猜一次 :)加油")
        else:
            print("太小了，再猜一次 :)加油")
        你猜的數字 = int(input("請輸入您所猜的整數:"))
        猜測次數 += 1       
    print("猜對了！總共猜了", 猜測次數, "次")
document["b1"].bind("click",b1)
&lt;/pre&gt;

&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>計算機程式 W15 範例整理</title><link href="./ji-suan-ji-cheng-shi-w15-fan-li-zheng-li.html" rel="alternate"></link><published>2016-12-19T12:00:00+08:00</published><updated>2016-12-19T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-12-19:./ji-suan-ji-cheng-shi-w15-fan-li-zheng-li.html</id><summary type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;div id="con"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as do
from browser import html
c = do["con"]
def compa(e):
    your_input = input("請輸入一個整數!")
    # 如何判斷所輸入的整數比 10 大
    try:
        if int(your_input) &gt; 10:
            c &lt;= "所輸入的整數:" + your_input + "比 10 大" + html.BR()
        else:
            c &lt;= "所輸入的整數:" + your_input + "比 10 小" + html.BR()
    except:
        c &lt;= "請輸入整數!!" + html.BR()

#print("test")
'''
for i in range(5):
    c &lt;= "test" + html.BR()
'''
do["b1"].bind("click", compa)
&lt;/script&gt;

&lt;p&gt;&lt;button id="b1"&gt;compa&lt;/button&gt;&lt;/p&gt;
&lt;LI&gt;@settings-&gt;設定節點

&lt;LI&gt;@edit-&gt;增新節點  

&lt;LI&gt;@path-&gt;儲存路徑

&lt;LI&gt;@button-&gt;按鈕

&lt;LI&gt;移動節點

ctrl+u 向上移動

ctrl+d 向下移動

ctrl+r 向右移動

ctrl+l 向左移動

ctrl+i 新增內容

ctrl+b 執行內容</content><category term="使用導引"></category></entry><entry><title>計算機程式 W14 範例整理</title><link href="./ji-suan-ji-cheng-shi-w14-fan-li-zheng-li.html" rel="alternate"></link><published>2016-12-12T12:00:00+08:00</published><updated>2016-12-12T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-12-12:./ji-suan-ji-cheng-shi-w14-fan-li-zheng-li.html</id><summary type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;


&lt;p&gt;在機械設計工程系的計算機程式課程中, 學習 Python3 的基本目的, 希望在最短時間內, 讓學員能夠除了在身旁的電腦或筆電上, 利用 Python3 程式語法進行各種資料處理與運算外, 還希望學員能夠透過編寫網際程式, 利用網站執行協同設計程式.&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;div id ="ex1"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
container = doc['ex1']

container&lt;="W14練習"
&lt;/script&gt;

&lt;div id ="ex2"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
from browser import html
container = doc['ex2']
mystring = input("要印出什麼字串?")
mynum = input("要印幾次?")

for i in range(int(mynum)):
    #container&lt;="W14練習-2"+html.BR()
    container&lt;=mystring+html.BR()
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>W13 Brython 繪圖範例</title><link href="./w13-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-12-05T12:00:00+08:00</published><updated>2016-12-05T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-12-05:./w13-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖繪
圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 繪圖繪
圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="1000"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

'''
# 改用 background 函式繪圖
# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
'''
def canvasText(x, y, fontSize, string, sup, sub, color, ctx):
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    #ctx.font = "20px Arial"
    ctx.font = str(fontSize)+ "px Arial"
    ctx.fillText(string, x, y)
    ctx.font = str(fontSize-8)+ "px Arial"
    if sup != "":
        ctx.fillText(sup, x+fontSize/1.6, y-fontSize/2)
    if sub != "":
        ctx.fillText(sup, x+fontSize/1.6, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()

# 設法利用運算印出吉他各把位的音名
def doreme(x, y, fontSize, order, ctx):
    # EADGBE (guitar string)
    # FgGaAbBCdDeE (C=Do, D=Re, E=Mi)
    #簡譜 1 2 3 4 5 6 7 
    #音名 C D E F G A B 
    #唱名 Do Re Mi Fa Sol La Ti 

    # 讓音名數列可以每 12 音名後, 升高 key 後從頭開始
    if order &gt; 12:
        order = order % 12

    if order == 1:
        canvasText(x, y, fontSize, "A", "", "", "black", ctx)
    elif order ==2:
        canvasText(x, y, fontSize, "B", "b", "", "red", ctx)
    elif order == 3:
        canvasText(x, y, fontSize, "B", "", "", "black", ctx)
    elif order == 4:
        canvasText(x, y, fontSize, "C", "", "", "black", ctx)
    elif order == 5:
        canvasText(x, y, fontSize, "D", "b", "", "red", ctx)
    elif order == 6:
        canvasText(x, y, fontSize, "D", "", "", "black", ctx)
    elif order == 7:
        canvasText(x, y, fontSize, "E", "b", "", "red", ctx)
    elif order == 8:
        canvasText(x, y, fontSize, "E", "", "", "black", ctx)
    elif order == 9:
        canvasText(x, y, fontSize, "F", "", "", "black", ctx)
    elif order == 10:
        canvasText(x, y, fontSize, "G", "b", "", "red", ctx)
    elif order == 11:
        canvasText(x, y, fontSize, "G", "", "", "black", ctx)
    elif order == 12:
        canvasText(x, y, fontSize, "A", "b", "", "red", ctx)
    else:
        canvasText(x, y, fontSize, "A", "b", "", "red", ctx)

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    # 標定各弦音符號, 以及把位編號
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.font = "20px Arial"
    sixString = ["E", "A", "D", "G", "B", "E"]
    stringNum = 0
    for i in sixString:
        ctx.fillText(i, x-7+stringNum*xinc, y-30)
        stringNum = stringNum + 1
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
    # EADGBE (guitar string)
    # FgGaAbBCdDeE (C=Do, D=Re, E=Mi)
    canvasText(x, y-50, 20, "A", "", "", "black", ctx)
    canvasText(x+xinc, y-50, 20, "B", "b", "", "red", ctx)
    canvasText(x+xinc*2, y-50, 20, "B", "", "", "black", ctx)
    canvasText(x+xinc*3, y-50, 20, "C", "", "", "black", ctx)
    canvasText(x+xinc*4, y-50, 20, "D", "b", "", "red", ctx)
    canvasText(x+xinc*5, y-50, 20, "D", "", "", "black", ctx)
    canvasText(x+xinc*6, y-50, 20, "E", "b", "", "red", ctx)
    canvasText(x+xinc*7, y-50, 20, "E", "", "", "black", ctx)
    canvasText(x+xinc*8, y-50, 20, "F", "", "", "black", ctx)
    canvasText(x+xinc*9, y-50, 20, "G", "b", "", "red", ctx)
    canvasText(x+xinc*10, y-50, 20, "G", "", "", "black", ctx)
    canvasText(x+xinc*11, y-50, 20, "A", "b", "", "red", ctx)
    ####################################
    # 以下利用數列運算, 從已知第1把位的音名分別推算各把位的音名
    # 吉他初始音名次序 816(11)38
    ####################################
    firstBar = [8, 1, 6, 11, 3, 8]
    # j 為往下增量
    for j in range(18):
        # k 為 往右把位初始值
        fontSize = 15 
        for k in range(6):
            bx = x + (k)*w - fontSize/3
            by = y + (j)*h+h/2 + fontSize/2
            order = firstBar[k] + j + 1
            doreme(bx, by, fontSize, order, ctx)


# 一開始 x, y 為圓球圓心, 但是為了配合和弦繪圖
# 將 x, y 改為和弦的左上角座標 x, y
# 配合 w, h, wcoord, hcoord 進行運算得到圓的圓心座標 bx, by
def ball(x, y, w, h , wcoord, hcoord, color, ctx):
    bx = x + (wcoord-1)*w
    by = y+2 + (hcoord-1)*h+h/2
    if w &lt; h:
        r2 = w/2 -2
    else:
        r2 = h/2 -2
    ctx.beginPath()
    ctx.fillStyle = color
    ctx.strokeStyle = color
    ctx.arc(bx, by, r2, 0, 2*math.pi, False)
    # 為了疊上各把位的音名, 暫時不填色
    #ctx.fill()
    ctx.stroke()
    ctx.closePath()

x = 300
y = 200
w = 20
h = 30
# 將前面的水平線與垂直線繪圖改用 background 繪圖
background(x, y, w, h, 5, 18, ctx)
for i in range( 6):
    for j in range(18):
        ball(x, y, w, h, i+1, j+1, 'black', ctx)
ball(x, y, w, h, 1, 4, 'red', ctx)

&lt;/script&gt;

&lt;p&gt;一堆迴圈不太好學阿&lt;/p&gt;</content><category term="使用導引"></category></entry><entry><title>W12 Brython 繪圖範例</title><link href="./w12-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-28T12:00:00+08:00</published><updated>2016-11-28T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-11-28:./w12-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖繪
圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 繪圖繪
圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- A Major --&gt;

&lt;canvas id="japanflag3" width="600" height="250"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
canvas = doc["japanflag3"]
ctx = canvas.getContext("2d")
 #垂直
ctx.beginPath()
ctx.lineWidth = 1
for i in range(6):
    ctx.moveTo(100+i*20,50)
    ctx.lineTo(100+i*20,150)
#水平
for i in range(5):
    ctx.moveTo(100,50+i*25)
    ctx.lineTo(200,50+i*25)
ctx.strokeStyle = "blue"
ctx.stroke()
ctx.closePath()
#粗線
ctx.beginPath()
ctx.lineWidth = 7
ctx.moveTo(99,50)
ctx.lineTo(201,50)
ctx.stroke()
ctx.closePath()

#A Major 
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.font = "25px Arial"
ctx.fillText("A Major", 110, 25)
ctx.fill()
ctx.stroke()
ctx.closePath()
# 1
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(140, 87.5, 7, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()
ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("1", 135, 92.5)
ctx.fill()
ctx.stroke()
ctx.closePath()
# 2
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(160, 87.5, 7, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()
ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("2", 155, 92.5)
ctx.fill()
ctx.stroke()
ctx.closePath()
# 3
ctx.beginPath()
ctx.fillStyle = 'black'
ctx.strokeStyle = "black"
ctx.arc(180, 87.5, 7, 0, 2*math.pi, False)
ctx.fill()
ctx.stroke()
ctx.closePath()
ctx.beginPath()
ctx.fillStyle = 'white'
ctx.font = "16px Arial"
ctx.fillText("3", 175, 92.5)
ctx.fill()
ctx.stroke()
ctx.closePath()
# o1
ctx.beginPath()
ctx.arc(120, 40, 5, 0, 2*math.pi, False)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()
# o2
ctx.beginPath()
ctx.arc(200, 40, 5, 0, 2*math.pi, False)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()
# x
ctx.beginPath()
ctx.moveTo(95, 35)
ctx.lineTo(105, 45)
ctx.moveTo(105, 35)
ctx.lineTo(95, 45)
ctx.lineWidth =3
ctx.strokeStyle = "black"
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")
#定義吉他絃
def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()
# 指法(x,y座標,指法)
def finger(x,y,nu):
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.arc(x, y, 9, 0, 2*math.pi, False)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
    ctx.beginPath()
    ctx.fillStyle = 'white'
    ctx.font = "16px Arial"
    ctx.fillText(nu, x-4.5, y+5.5)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
#定義XO
def ooo(xo,yo):
    ctx.beginPath()
    ctx.arc(xo, yo, 5, 0, 2*math.pi, False)
    ctx.lineWidth =3
    ctx.strokeStyle = "black"
    ctx.stroke()
    ctx.closePath()
def xxx(xx,yx):
   ctx.beginPath()
   ctx.moveTo(xx-5, yx-5)
   ctx.lineTo(xx+5, yx+5)
   ctx.moveTo(xx+5, yx-5)
   ctx.lineTo(xx-5, yx+5)
   ctx.lineWidth =3
   ctx.strokeStyle = "black"
   ctx.stroke()
   ctx.closePath()
#定義文字(x,y座標,字)
def text(x,y,t,ctx):
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.font = "25px Arial"
    ctx.fillText(t, x, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
background(10, 60, 20, 25, 5, 4, ctx)
background(150, 60, 20, 25, 5, 4, ctx)
background(290, 60, 20, 25, 5, 4, ctx)
background(10, 260, 20, 25, 5, 4, ctx)
background(150, 260, 20, 25, 5, 4, ctx)
background(290, 260, 20, 25, 5, 4, ctx)
#background(0, 0, 25, 25, 39, 149, ctx)
text(15,25,"A Major ",ctx)
text(155,25,"C Major ",ctx)
text(295,25,"G Major ",ctx)
text(15,225,"D Major ",ctx)
text(155,225,"E Major ",ctx)
text(300,225,"C Maj7 ",ctx)
#A major指法
finger(50,98,"1")    
finger(70,98,"2")  
finger(90,98,"3")  
xxx(10,48)
ooo(30,48)
ooo(110,48)
#C major指法
finger(230,74,"1")    
finger(190,98,"2")  
finger(170,123,"3")  
xxx(150,48)
ooo(210,48)
ooo(250,48)
#G major指法
finger(310,98,"1")    
finger(290,123,"2")  
finger(370,123,"3")  
finger(390,123,"4") 
ooo(330,48)
ooo(350,48)
#D major指法
finger(70,298,"1")    
finger(90,323,"2")  
finger(110,298,"3") 
xxx(10,248)
xxx(30,248)
ooo(50,248)
#E major指法
finger(211,274,"1")    
finger(169,298,"2")  
finger(190,298,"3") 
xxx(150,248)
ooo(230,248)
ooo(250,248)
#C maj7指法
finger(330,298,"1")    
finger(310,323,"2")  
xxx(290,248)
ooo(350,248)
ooo(370,248)
ooo(390,248)

&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")
#定義吉他絃
def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()
# 指法(x,y座標,指法)
def finger(x,y,nu):
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.arc(x, y, 9, 0, 2*math.pi, False)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
    ctx.beginPath()
    ctx.fillStyle = 'white'
    ctx.font = "16px Arial"
    ctx.fillText(nu, x-4.5, y+5.5)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
#定義XO
def ooo(xo,yo):
    ctx.beginPath()
    ctx.arc(xo, yo, 5, 0, 2*math.pi, False)
    ctx.lineWidth =3
    ctx.strokeStyle = "black"
    ctx.stroke()
    ctx.closePath()
def xxx(xx,yx):
   ctx.beginPath()
   ctx.moveTo(xx-5, yx-5)
   ctx.lineTo(xx+5, yx+5)
   ctx.moveTo(xx+5, yx-5)
   ctx.lineTo(xx-5, yx+5)
   ctx.lineWidth =3
   ctx.strokeStyle = "black"
   ctx.stroke()
   ctx.closePath()
#定義文字(x,y座標,字)
def text(x,y,t,ctx):
    ctx.beginPath()
    ctx.fillStyle = 'black'
    ctx.strokeStyle = "black"
    ctx.font = "25px Arial"
    ctx.fillText(t, x, y)
    ctx.fill()
    ctx.stroke()
    ctx.closePath()
background(10, 60, 20, 25, 5, 4, ctx)
background(150, 60, 20, 25, 5, 4, ctx)
background(290, 60, 20, 25, 5, 4, ctx)
background(10, 260, 20, 25, 5, 4, ctx)
background(150, 260, 20, 25, 5, 4, ctx)
background(290, 260, 20, 25, 5, 4, ctx)
#background(0, 0, 25, 25, 39, 149, ctx)
text(15,25,"A Major ",ctx)
text(155,25,"C Major ",ctx)
text(295,25,"G Major ",ctx)
text(15,225,"D Major ",ctx)
text(155,225,"E Major ",ctx)
text(300,225,"C Maj7 ",ctx)
#A major指法
finger(50,98,"1")    
finger(70,98,"2")  
finger(90,98,"3")  
xxx(10,48)
ooo(30,48)
ooo(110,48)
#C major指法
finger(230,74,"1")    
finger(190,98,"2")  
finger(170,123,"3")  
xxx(150,48)
ooo(210,48)
ooo(250,48)
#G major指法
finger(310,98,"1")    
finger(290,123,"2")  
finger(370,123,"3")  
finger(390,123,"4") 
ooo(330,48)
ooo(350,48)
#D major指法
finger(70,298,"1")    
finger(90,323,"2")  
finger(110,298,"3") 
xxx(10,248)
xxx(30,248)
ooo(50,248)
#E major指法
finger(211,274,"1")    
finger(169,298,"2")  
finger(190,298,"3") 
xxx(150,248)
ooo(230,248)
ooo(250,248)
#C maj7指法
finger(330,298,"1")    
finger(310,323,"2")  
xxx(290,248)
ooo(350,248)
ooo(370,248)
ooo(390,248)
&lt;/script&gt;
&lt;/pre&gt;</content><category term="使用導引"></category></entry><entry><title>W11 Brython 繪圖範例</title><link href="./w11-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-21T12:00:00+08:00</published><updated>2016-11-21T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-11-21:./w11-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫圖 --&gt;

&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
ctx.closePath()

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()

background(300, 300, 10, 10, 5, 4, ctx)
background(100, 300, 10, 10, 5, 4, ctx)
background(300, 100, 10, 10, 5, 12, ctx)
&lt;/script&gt;

&lt;p&gt;上述繪圖第一部分使用迴圈繪製水平線與垂直線:&lt;/p&gt;

&lt;pre class="brush: python"&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

# 水平線
for i in range(5):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    if i == 0:
        ctx.lineWidth = 7
    else:
        ctx.lineWidth = 1
    ctx.moveTo(99, 100+i*30)
    ctx.lineTo(201, 100+i*30)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()

# 垂直線
for i in range(6):
    ctx.beginPath()
# 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    ctx.moveTo(100+i*20, 100)
    ctx.lineTo(100+i*20, 220)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    ctx.stroke()
    ctx.closePath()
ctx.closePath()
&lt;/script&gt;
&lt;/pre&gt;

&lt;p&gt;至於將繪圖內容納入 def 函式定義格式後:&lt;/p&gt;

&lt;pre class="brush: python"&gt;
&lt;!-- 以下實際利用  Brython 畫圖 --&gt;
&lt;canvas id="chord1" width="600" height="400"&gt;&lt;/canvas&gt;
&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["chord1"]
ctx = canvas.getContext("2d")

def background(x, y, xinc, yinc, xnum, ynum, ctx):
    # 水平線
    for i in range(ynum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        if i == 0:
            ctx.lineWidth = 7
        else:
            ctx.lineWidth = 1
        ctx.moveTo(x-1, y+i*yinc)
        ctx.lineTo(x+xnum*xinc+1, y+i*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()

    # 垂直線
    for i in range(xnum+1):
        ctx.beginPath()
    # 設定線的寬度為 1 個單位
        ctx.lineWidth = 1
        ctx.moveTo(x+i*xinc, y)
        ctx.lineTo(x+i*xinc, y+ynum*yinc)
        # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
        ctx.strokeStyle = "blue"
        ctx.stroke()
        ctx.closePath()
    ctx.closePath()

background(300, 300, 10, 10, 5, 4, ctx)
background(100, 300, 10, 10, 5, 4, ctx)
background(300, 100, 10, 10, 5, 12, ctx)
&lt;/script&gt;
&lt;/pre&gt;</content><category term="使用導引"></category></entry><entry><title>W10 Brython 繪圖範例</title><link href="./w10-brython-hui-tu-fan-li.html" rel="alternate"></link><published>2016-11-14T12:00:00+08:00</published><updated>2016-11-14T12:00:00+08:00</updated><author><name>yen</name></author><id>tag:None,2016-11-14:./w10-brython-hui-tu-fan-li.html</id><summary type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;
</summary><content type="html">&lt;p&gt;Brython 繪圖&lt;/p&gt;
&lt;p&gt;繪圖流程, 導入程式庫, 啟動, 然後引用各種模組開始繪圖&lt;/p&gt;


&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下實際利用  Brython 畫兩條直線 --&gt;

&lt;canvas id="japanflag1" width="600" height="200"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 畫右上左下的斜線
ctx.moveTo(150, 100)
ctx.lineTo(100, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2016Fall 程式練習題-12345</title><link href="./2016fall-cheng-shi-lian-xi-ti-12345.html" rel="alternate"></link><published>2016-10-31T12:00:00+08:00</published><updated>2016-10-31T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-10-31:./2016fall-cheng-shi-lian-xi-ti-12345.html</id><summary type="html">&lt;p&gt;1234已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;1234已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;


&lt;p&gt;研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;</content><category term="使用導引"></category></entry><entry><title>2016Fall 程式練習題-1234</title><link href="./2016fall-cheng-shi-lian-xi-ti-1234.html" rel="alternate"></link><published>2016-10-24T12:00:00+08:00</published><updated>2016-10-24T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-10-24:./2016fall-cheng-shi-lian-xi-ti-1234.html</id><summary type="html">&lt;p&gt;1234已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;1234已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;


&lt;p&gt;以下利用 Brython 讀取位於倉儲中的 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt; 與 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt; 資料檔案.&lt;/p&gt;
&lt;p&gt;表示學校教務系統中, 修 2016fallcpa 的學員名單為:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行檔案讀取與比對流程 --&gt;

&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;

&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

&lt;div id="container"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container = document['container']
data = open("./../w6_list.txt").read()
container &lt;= data
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;而截至 w6, 納入分組名單中的學員有:&lt;/p&gt;
&lt;div id="container2"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
container2 = document['container2']
data2 = open("./../w6_group.txt").read()
container2 &lt;= data2
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;現在, 誰能夠幫我們找出至今尚未納入分組名單中的學員, 共有那些人？&lt;/p&gt;
&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
# 從 id=script1 程式區段取 data 變數
from script1 import data
container3 = document['container3']
data3 = open("./../w6_group.txt").read()
group = data3.splitlines()
# 希望將分組資料轉為學員數列, 令為變數名稱 result_g
result_g = []
# 已經註冊者數列設為 registered
registered = []
for line in group:
    # 去除每一行最後的空白成員
    sline = line.split(",")
    # 再將各組拆成個別組員後, 串成 result_g
    for m in sline:
        result_g.append(m)
    #container3 &lt;= len(sline)
    #container3 &lt;= html.BR()
#container3 &lt;= len(result_g)
registered = data.splitlines()[:-1]
# 設法找出至今尚未分組的學員學號
not_in_group = [c for c in registered if c not in result_g]
#container3 &lt;= len(registered) -len(result_g)
n = 1
for i in not_in_group:
    container3 &lt;= "第"+str(n)+"位: "+ str(i)
    n = n + 1
    container3 &lt;= html.BR()
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2016Fall 程式練習題</title><link href="./2016fall-cheng-shi-lian-xi-ti.html" rel="alternate"></link><published>2016-10-22T12:00:00+08:00</published><updated>2016-10-22T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-10-22:./2016fall-cheng-shi-lian-xi-ti.html</id><summary type="html">&lt;p&gt;已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;
</summary><content type="html">&lt;p&gt;已知截至第六週 2016fallcpa 的分組資料位於倉儲中的 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt;, 而從學校修課系統下載的修課人員名條則為 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt;, 請各組著手練習, 找出尚未納入分組的人員名單, 並研擬如何處置上課一個半月卻尚未進入情況的學員?&lt;/p&gt;


&lt;p&gt;以下利用 Brython 讀取位於倉儲中的 &lt;a href="./../w6_list.txt"&gt;w6_list.txt&lt;/a&gt; 與 &lt;a href="./../w6_group.txt"&gt;w6_group.txt&lt;/a&gt; 資料檔案.&lt;/p&gt;
&lt;p&gt;表示學校教務系統中, 修 2016fallcpa 的學員名單為:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行檔案讀取與比對流程 --&gt;

&lt;!-- 假如需要用圖型表示數字, 則利用 canvas 繪圖 --&gt;

&lt;!-- &lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt; --&gt;

&lt;div id="container"&gt;&lt;/div&gt;

&lt;script type="text/python3" id="script1"&gt;
from browser import document, html
container = document['container']
data = open("./../w6_list.txt").read()
container &lt;= data
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;而截至 w6, 納入分組名單中的學員有:&lt;/p&gt;
&lt;div id="container2"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
container2 = document['container2']
data2 = open("./../w6_group.txt").read()
container2 &lt;= data2
&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;現在, 誰能夠幫我們找出至今尚未納入分組名單中的學員, 共有那些人？&lt;/p&gt;
&lt;div id="container3"&gt;&lt;/div&gt;

&lt;script type="text/python3"&gt;
from browser import document, html
# 從 id=script1 程式區段取 data 變數
from script1 import data
container3 = document['container3']
data3 = open("./../w6_group.txt").read()
group = data3.splitlines()
# 希望將分組資料轉為學員數列, 令為變數名稱 result_g
result_g = []
# 已經註冊者數列設為 registered
registered = []
for line in group:
    # 去除每一行最後的空白成員
    sline = line.split(",")
    # 再將各組拆成個別組員後, 串成 result_g
    for m in sline:
        result_g.append(m)
    #container3 &lt;= len(sline)
    #container3 &lt;= html.BR()
#container3 &lt;= len(result_g)
registered = data.splitlines()[:-1]
# 設法找出至今尚未分組的學員學號
not_in_group = [c for c in registered if c not in result_g]
#container3 &lt;= len(registered) -len(result_g)
n = 1
for i in not_in_group:
    container3 &lt;= "第"+str(n)+"位: "+ str(i)
    n = n + 1
    container3 &lt;= html.BR()
&lt;/script&gt;</content><category term="使用導引"></category></entry><entry><title>2016Fall 機械設計主題教學</title><link href="./2016fall-ji-jie-she-ji-zhu-ti-jiao-xue.html" rel="alternate"></link><published>2016-09-02T12:00:00+08:00</published><updated>2016-09-02T12:00:00+08:00</updated><author><name>40523224</name></author><id>tag:None,2016-09-02:./2016fall-ji-jie-she-ji-zhu-ti-jiao-xue.html</id><summary type="html">&lt;p&gt;知識管理與最佳化應用實驗室試圖利用計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習等課程, 進行與機械設計相關的主題式教學, 其中包含強化創造力的教學、令學員熟習六種工程表達方式, 並且俱備融入協同設計所需要的四大面向知識與技能.&lt;/p&gt;
</summary><content type="html">&lt;p&gt;知識管理與最佳化應用實驗室試圖利用計算機程式、網際內容管理、電腦輔助設計實習與協同產品設計實習等課程, 進行與機械設計相關的主題式教學, 其中包含強化創造力的教學、令學員熟習六種工程表達方式, 並且俱備融入協同設計所需要的四大面向知識與技能.&lt;/p&gt;


&lt;h1&gt;機械設計主題教學&lt;/h1&gt;
&lt;p&gt;創造力三元素, 機械設計的六種表達, 協同設計的四大面向.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;強化創造能力 - 自學力、程式力與想像力
(Creative Competencies)&lt;/li&gt;
&lt;li&gt;熟習六種表達  - 口語、文字、2D、3D、理論與實體表達
(Six Presentation Methods)&lt;/li&gt;
&lt;li&gt;融入協同設計 - 電腦、網路、軟硬體工具與協同專案
(Collaborative Designs)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;計算機程式&lt;/h1&gt;
&lt;p&gt;從 Python3 的 print(), input(), 變數命名到關鍵字, 可以透過簡單的單位轉換問題進行練習:&lt;/p&gt;
&lt;p&gt;首先我們舉 Python3 程式執行的三個地方:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在單機 Windows 10 操作系統環境下利用可攜程式系統執行&lt;/li&gt;
&lt;li&gt;利用遠端桌面或 X-Windows, 在近端利用遠端的電腦硬體與操作系統執行&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在近端利用瀏覽器執行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;單機執行:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;按下  start.bat 後, 系統就會配置好 git 與 Python3 的程式環境, 可以在命令列中直接用互動的方式執行 Python3 程式, 也可以在 SciTE 編輯器中, 透過設定按下 go 之後執行&lt;/p&gt;
&lt;p&gt;所牽涉的問題:&lt;/p&gt;
&lt;p&gt;可攜程式環境如何建立? Python3 執行環境如何配置? 執行的 Python3 是那一個版本?&lt;/p&gt;
&lt;p&gt;希望在 SciTE 中直接執行 Python3 程式, 該如何設定?&lt;/p&gt;
&lt;p&gt;能不能在 Leo Editor 中執行 Python3 程式, 為何要這樣做?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;近端連到遠端執行:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以 Remote Desktop, 連接到遠端的電腦畫面中執行可攜程式系統中的 Python3 程式, 基本架構與流程與近端單機執行相同.&lt;/p&gt;
&lt;p&gt;利用 putty 與 Xming, 連線到支援 X-Windows 協定的電腦, 將遠端的視窗搬到近端執行, 但仍使用遠端電腦的硬體與軟體支援.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在瀏覽器中執行:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由於網際瀏覽器環境所整合的工具愈來愈多, 就連原本只能在單機執行的 SolidWorks, 也已經有初步成型的 OnShape 可以取代部份的零組件設計分析工作, 因此本課程以 Brython 為例, 說明如何在瀏覽器中執行 Python3 程式.&lt;/p&gt;
&lt;p&gt;所牽涉問題:&lt;/p&gt;
&lt;p&gt;如何設置? &lt;a href="https://www.brython.info/tests/console.html?lang=en"&gt;Brython Console&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;所有近端能執行的程式都能利用瀏覽器執行?&lt;/p&gt;
&lt;p&gt;以下使用 Brython 標準程式庫執行 Python3 繪圖程式:&lt;/p&gt;
&lt;!-- 導入 Brython 標準程式庫 --&gt;

&lt;script type="text/javascript" 
    src="https://cdn.rawgit.com/brython-dev/brython/master/www/src/brython_dist.js"&gt;
&lt;/script&gt;

&lt;!-- 啟動 Brython --&gt;

&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;

&lt;!-- 以下利用 Brython 程式執行繪圖 --&gt;

&lt;canvas id="plotarea" width="600" height="400"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &gt;= width or (x[i]-r) &lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &gt; width):
        x[i] = width-r
    elif ((x[i]-r) &lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()
    ctx.closePath()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&lt;/script&gt;

&lt;p&gt;上面小球自由落體的繪圖程式:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="plotarea" width="600" height="400"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
# 導入 browser 模組中的 document, 並設為 doc 變數
from browser import document as doc
# 導入數學模組
import math
# 產生各小球的亂數速度用
import random
# 導入 browser 中的計時器, 建立動畫用
import browser.timer

# 準備繪圖畫布
canvas = doc["plotarea"]
ctx = canvas.getContext("2d")

# 取畫布的寬與高度
width = canvas.width
height = canvas.height

n = 20
# 已知數列內容個數, 先分別與 None 對應
x = [None]*n
y = [None]*n
vy = [None]*n
vx = [None]*n
# 重力加速度, Y 方向向下為正
g = 0.05
# 空氣的黏滯阻尼係數
cor = 0.7 
# 球的彈力係數
fr = 0.95
# 球的半徑
r = 5

for i in range(n):
    x[i] = 300
    y[i] = 100
    # random.random() 將會產生介於 0 與 1 的浮點亂數
    vx[i] = 2*(random.random()-.5)
    vy[i] = 2*(random.random()-.5)

# 更新第 i 球 Y 座標的運算邏輯
def updateY(i):
    if ((y[i]+r) &amp;lt; height):
        #y = height
        vy[i] += g
    else:
        vy[i] = -vy[i]*cor
        vx[i] *= fr
    y[i] += vy[i]
    if ((y[i]+r) &amp;gt; height):
        y[i] = height-r

# 更新第 i 球 X 座標的運算邏輯
def updateX(i):
    if ((x[i]+r) &amp;gt;= width or (x[i]-r) &amp;lt;= 0):
        vx[i] = -vx[i]*cor
    x[i] += vx[i]
    if ((x[i]+r) &amp;gt; width):
        x[i] = width-r
    elif ((x[i]-r) &amp;lt; 0):
        x[i] = r

# 畫圓函式
def circle(x,y,r):
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    ctx.fill()
    ctx.closePath()

# 寫字函式
def text(s):
    ctx.fillStyle = "#ff0000"
    ctx.font = "30px sans-serif"
    ctx.textBaseline = "bottom"
    ctx.fillText(s,0,height)

# 每隔特定時間, 進行動畫繪製
def animate():
    # 刷新畫布
    ctx.clearRect(0, 0, width, height)
    # 逐一重新繪製小球
    ctx.fillStyle = "#000000"
    for i in range(n):
        updateY(i)
        updateX(i)
        circle(x[i],y[i],r)

text("Click me!")

# 畫布點擊後執行的函式
def on_canvas_click(ev):
    browser.timer.set_interval(animate,0)

# 只要使用者點擊在畫布上任何地方, 即執行 on_canvas_click 函式
canvas.bind('click', on_canvas_click, False)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;p&gt;繪製日本國旗:&lt;/p&gt;
&lt;p&gt;步驟1, 先能畫一條線:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag1" width="600" height="250"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;!-- 以下實際利用  Brython 畫一條直線 --&gt;

&lt;canvas id="japanflag1" width="600" height="250"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
from browser import document as doc
import math
# 準備繪圖畫布
canvas = doc["japanflag1"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 先畫一條直線
ctx.beginPath()
# 設定線的寬度為 1 個單位
ctx.lineWidth = 1
# 將畫筆移動到 (100, 100) 座標點
ctx.moveTo(100, 100)
# 然後畫直線到 (150, 200) 座標點
ctx.lineTo(150, 200)
# 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
ctx.strokeStyle = "blue"
# 實際執行畫線
ctx.stroke()
ctx.closePath()
&lt;/script&gt;

&lt;p&gt;接著畫四條直線:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag2" width="600" height="400"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag2" width="600" height="350"&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["japanflag2"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)
&lt;/script&gt;

&lt;p&gt;接著在四條直線中央畫一個圓:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag3" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
from browser import document
import math

# 準備繪圖畫布
canvas = document["japanflag3"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)

# 以下要在框線中央畫一個圓, 設半徑為 80
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2

ctx.beginPath()
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, True)
# 設線顏色為紅色
ctx.strokeStyle = 'rgb(255, 0, 0)'
ctx.stroke()
# 填色設為紅色
ctx.fillStyle = 'rgb(255, 0, 0)'
ctx.fill()
ctx.closePath()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag3" width="650" height="450"&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
from browser import document
import math

# 準備繪圖畫布
canvas = document["japanflag3"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(x1, y1, x2, y2):
    global ctx
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()

# 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
# 假設從 (10, 10) 畫到 (410, 310) 的外框
# 先畫兩條水平線
draw_line(10, 10, 410, 10)
draw_line(10, 310, 410, 310)
# 再畫兩條垂直線
draw_line(10, 10, 10, 310)
draw_line(410, 10, 410, 310)

# 以下要在框線中央畫一個圓, 設半徑為 80
# context.arc(x,y,r,sAngle,eAngle,counterclockwise)
# arc(圓心 x, 圓心 y, 起始角, 終點角, 是否逆時鐘轉)
circle_x = 10 + 400/2
circle_y = 10 + 300/2

ctx.beginPath()
ctx.arc(circle_x, circle_y, 80, 0, math.pi*2, True)
# 設線顏色為紅色
ctx.strokeStyle = 'rgb(255, 0, 0)'
ctx.stroke()
# 填色設為紅色
ctx.fillStyle = 'rgb(255, 0, 0)'
ctx.fill()
ctx.closePath()
&lt;/script&gt;

&lt;p&gt;然後將各繪圖模組寫成函式:&lt;/p&gt;
&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="japanflag4" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python"&amp;gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["japanflag4"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(ctx, x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()


# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(ctx, x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(ctx, x, y, w*3/2+x, y)
    draw_line(ctx, x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(ctx, x, y, x, w+y)
    draw_line(ctx, w*3/2+x, y, w*3/2+x, w+y)

def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()
    ctx.closePath()

# 呼叫 draw_frame()
width = 400
draw_frame(ctx, 10, 10, width)
# 計算框的中心點座標
x_center = 10 + width*3/2/2
y_center = 10 + width/2
# 中間圓的直徑為寬的 3/5
radius = width*3/5/2
draw_circle(x_center, y_center, radius)
&amp;lt;/script&amp;gt;
&lt;/pre&gt;

&lt;canvas id="japanflag4" width="650" height="450"&gt;&lt;/canvas&gt;

&lt;script type="text/python"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["japanflag4"]
ctx = canvas.getContext("2d")

# 以下可以利用 ctx 物件進行畫圖
# 因為要畫四條直線, 這裡要將畫直線改寫為函式
# 定義畫直線的函式, 以 (x1, y1) 為起點, 畫到 (x2, y2)
def draw_line(ctx, x1, y1, x2, y2):
    ctx.beginPath()
    # 設定線的寬度為 1 個單位
    ctx.lineWidth = 1
    # 將畫筆移動到 (x1, y1) 座標點
    ctx.moveTo(x1, y1)
    # 然後畫直線到 (x2, y2) 座標點
    ctx.lineTo(x2, y2)
    # 設定顏色為藍色, 也可以使用 "rgb(0, 0, 255)" 字串設定顏色值
    ctx.strokeStyle = "blue"
    # 實際執行畫線
    ctx.stroke()
    ctx.closePath()


# 將外框線寫成函式, 寬為高的 3/2 倍
# 因為 draw_frame 函式呼叫 draw_line() 因此要在其後定義
def draw_frame(ctx, x, y, w):
    # 準備呼叫 draw_line() 四次以便畫出國旗外框四條線
    # 假設從 (x, y) 畫到 (410, 310) 的外框
    # 先畫兩條水平線
    draw_line(ctx, x, y, w*3/2+x, y)
    draw_line(ctx, x, w+y, w*3/2+x, w+y)
    # 再畫兩條垂直線
    draw_line(ctx, x, y, x, w+y)
    draw_line(ctx, w*3/2+x, y, w*3/2+x, w+y)

def draw_circle(x, y, r, fill=None):
    global ctx
    ctx.beginPath()
    ctx.arc(x, y, r, 0, math.pi*2, True)
    if fill == None:
        ctx.fillStyle = 'rgb(255, 0, 0)'
        ctx.fill()
    else:
        ctx.strokeStyle = "rgb(255, 0, 0)"
        ctx.stroke()
    ctx.closePath()

# 呼叫 draw_frame()
width = 400
draw_frame(ctx, 10, 10, width)
# 計算框的中心點座標
x_center = 10 + width*3/2/2
y_center = 10 + width/2
# 中間圓的直徑為寬的 3/5
radius = width*3/5/2
draw_circle(x_center, y_center, radius)
&lt;/script&gt;

&lt;p&gt;接下來畫中華民國國旗:&lt;/p&gt;
&lt;canvas id="rocflag" width="650" height="450"&gt;&lt;/canvas&gt;

&lt;script type="text/python3"&gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["rocflag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&lt;/script&gt;

&lt;pre class="brush: python"&gt;
&amp;lt;canvas id="rocflag" width="650" height="450"&amp;gt;&amp;lt;/canvas&amp;gt;
&amp;lt;script type="text/python3"&amp;gt;
# 導入 doc
from browser import document as doc
import math

# 準備繪圖畫布
canvas = doc["rocflag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
&amp;lt;/script&amp;gt;
&lt;/pre&gt;</content><category term="使用導引"></category><category term="創造力"></category><category term="表達能力"></category><category term="協同設計"></category></entry></feed>